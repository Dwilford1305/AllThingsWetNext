# All Things Wetaskiwin Setup & Validation Workflow
#
# This workflow operationalizes the previous documentation-only YAML.
# Sections from the original file are preserved as comments where relevant.
#
# Original conceptual sections (now comments):
# - prerequisites
# - setup_steps (Install, Env config, Build, Test, Lint, Dev server)
# - validation_steps (health check, core pages, API endpoints, auth UI)
# - project_structure, development_workflow, resources, success_criteria, notes
#
# To run manually: Go to Actions tab -> "All Things Wetaskiwin Setup" -> Run workflow.
# For DB-enabled runs: add repository secret MONGODB_URI.
#
# IMPORTANT: Dev server run here is ephemeral—only for validation. For real development, run locally.

name: All Things Wetaskiwin Setup

on:
  workflow_dispatch:
    inputs:
      run_tests:
        description: "Run test suite"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]
      run_lint:
        description: "Run linting"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]
      perform_validation:
        description: "Run endpoint & health validations"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]
      allow_partial_failures:
        description: "Continue after test/lint failures (graceful DB-missing mode)"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: setup-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    env:
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dummy-nextauth-secret-in-ci
      JWT_SECRET: dummy-jwt-secret-in-ci
      JWT_REFRESH_SECRET: dummy-jwt-refresh-secret-in-ci
      # MONGODB_URI is optionally injected via secrets if present:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show runtime context
        run: |
            echo "Actor: $GITHUB_ACTOR"
            echo "Ref: $GITHUB_REF"
            echo "SHA: $GITHUB_SHA"
            node -v
            npm -v

      # Prerequisites (from original 'prerequisites' section)
      - name: Setup Node.js (20.x)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Step 1: Install Dependencies
      - name: Install dependencies (npm ci)
        run: |
          echo "Installing dependencies..."
          npm ci
          echo "Disk usage after install:"
          du -sh . || true
        timeout-minutes: 5

      # Step 2: Environment Configuration (simulated)
      - name: Report environment configuration
        run: |
          echo "=== Environment Configuration ==="
          echo "NEXTAUTH_URL=$NEXTAUTH_URL"
          echo "JWT_SECRET: ${JWT_SECRET:0:10}..." # Show first 10 chars only
          echo "JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:0:10}..."
          if [ -n "$MONGODB_URI" ]; then
            echo "MONGODB_URI detected (length: ${#MONGODB_URI})"
          else
            echo "⚠️  MONGODB_URI not set - operating in graceful no-database mode."
            echo "   Some tests may fail - this is expected behavior."
          fi
          echo "=================================="

      # Step 3: Build
      - name: Build application
        run: |
          echo "Starting build..."
          time npm run build
        timeout-minutes: 5

      # Step 4: Tests (optional)
      - name: Run tests
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_tests == 'true' }}
        run: |
          echo "Running test suite..."
          npm test -- --watch=false || EXIT_CODE=$?
          echo "Test phase exit code: ${EXIT_CODE:-0}"
          # Capture (do not fail immediately if partial failures allowed)
          # Allow partial failures when: (1) workflow_dispatch with allow_partial_failures=true, OR (2) on push/PR
          if [ "${{ github.event_name == 'workflow_dispatch' && inputs.allow_partial_failures == 'true' || github.event_name != 'workflow_dispatch' }}" = "true" ]; then
            exit 0
          else
            exit ${EXIT_CODE:-0}
          fi
        timeout-minutes: 5

      # Step 5: Lint (optional)
      - name: Lint
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_lint == 'true' }}
        run: |
          echo "Running lint..."
          npm run lint || EXIT_CODE=$?
          echo "Lint exit code: ${EXIT_CODE:-0}"
          # Allow partial failures when: (1) workflow_dispatch with allow_partial_failures=true, OR (2) on push/PR
          if [ "${{ github.event_name == 'workflow_dispatch' && inputs.allow_partial_failures == 'true' || github.event_name != 'workflow_dispatch' }}" = "true" ]; then
            exit 0
          else
            exit ${EXIT_CODE:-0}
          fi
        timeout-minutes: 3

      # Step 6 + Validation steps: Start Development Server briefly & probe routes
      - name: Start dev server (background) & validate endpoints
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.perform_validation == 'true' }}
        run: |
          echo "Launching dev server (Turbopack) in background..."
          npm run dev > dev.log 2>&1 &
          DEV_PID=$!
          echo "Dev server PID: $DEV_PID"
          
          # Ensure cleanup on script exit
          trap "kill $DEV_PID 2>/dev/null || true; wait $DEV_PID 2>/dev/null || true" EXIT
          
          echo "Waiting for readiness..."
          ATTEMPTS=0
          until curl -fsS http://localhost:3000 >/dev/null 2>&1; do
            ATTEMPTS=$((ATTEMPTS+1))
            if [ $ATTEMPTS -gt 60 ]; then
              echo "Server failed to become ready within 60 attempts (~60s)."
              echo "=== Dev Server Log (tail) ==="
              tail -n 200 dev.log || true
              exit 1
            fi
            sleep 1
          done
          echo "Server is responsive."

          echo "---- Health Check ----"
          curl -fsS http://localhost:3000/api/health || echo "Health endpoint returned non-zero (expected if DB not connected)"

          echo "---- Core Pages (HEAD) ----"
          for p in / /events /businesses /news /jobs /marketplace; do
            echo "Checking $p"
            curl -I -s http://localhost:3000$p | head -n 1 || true
          done

          echo "---- API Endpoints (GET) ----"
          for e in /api/events /api/businesses /api/news; do
            echo "GET $e"
            curl -s http://localhost:3000$e | head -c 300 || true
            echo
            echo "-----"
          done

          echo "---- Auth Test Page (HEAD) ----"
          curl -I -s http://localhost:3000/auth-test | head -n 1 || true

          echo "Dev server validation complete."
          # Cleanup handled by trap
        timeout-minutes: 6

      # Summarize (Success Criteria)
      - name: Summary
        if: always()
        run: |
          echo "### Setup & Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Success Criteria Reference:**" >> $GITHUB_STEP_SUMMARY
          echo "- Build completed (see earlier logs)." >> $GITHUB_STEP_SUMMARY
            # Without persistent artifacts we rely on log presence.
          echo "- Dev server launched and responded (if validation enabled)." >> $GITHUB_STEP_SUMMARY
          echo "- Core pages probed via HTTP HEAD." >> $GITHUB_STEP_SUMMARY
          echo "- API endpoints returned JSON or graceful errors." >> $GITHUB_STEP_SUMMARY
          echo "- Tests & Lint may have partial failures (graceful mode) if DB absent." >> $GITHUB_STEP_SUMMARY
          if [ -n "${MONGODB_URI}" ]; then
            echo "- MongoDB URI provided: DB-backed behaviors may have been exercised." >> $GITHUB_STEP_SUMMARY
          else
            echo "- No MongoDB URI provided: Running in graceful no-DB mode." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "For deeper debugging, inspect 'Build', 'Run tests', 'Start dev server' step logs." >> $GITHUB_STEP_SUMMARY
          echo "Adjust triggers or split this workflow if you want lighter PR CI." >> $GITHUB_STEP_SUMMARY

      - name: Archive dev log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dev-log
          path: dev.log
          if-no-files-found: ignore
